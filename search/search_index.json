{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Exact Capture is a high-rate, lossless packet capture solution for ExaNIC network adapters. The system is fully open source and designed for performance as well as ease of configuration. It can be used with any ExaNIC network adapter, and is optimised for use with ExaDISK high speed NVMe SSDs. The system can be deployed on any suitably powerful server system. This manual covers full details on configuring and operating Exact Capture including: Quick start guide Installing and building Hardware requirements Configuration options Version history","title":"Introduction"},{"location":"arch/","text":"The Exact Capture software system comprises 4 major internal components: One or more \u201chot\u201d threads - to read packets from the ExaNIC(s) into memory One or more \u201ccold\u201d threads - to write packets from memory to disk(s) One or more shared memory queues - to connect the hot and cold threads to each other One management thread - responsible for control and statistics collection / reporting These basic architectural components are illustrated below, with the addition of the ExaNIC and ExaDisk resources. The head of each column highlights the performance limiting resource for that component:","title":"Internal Architecture"},{"location":"config/","text":"The Exact Capture application supports a number of configuration options in both short and long form. For example: $ exact-capture -i exanic0:0 --log-report-int 10 .... A quick start guide is available for getting started. The following table lists all commands available: Short Long Default Description i input (required) The ExaNIC interface(s) to capture on o output (required) The destination directory and filename stub to output to. Filenames will be output in the following format /output/dir/base_xx.expcap. Where xx is a unique file index. For details on the expcap format please see the Exact Capture Output Format (expcap) section later in this document. c cpus (required) The list of CPUs to assign threads to for management, listening and writing threads. This is specified in the the following format, m:ls,ls,ls:ws,ws,ws . Where m is the core number for management, and ls/ws are comma separated lists of listener and writer CPU core numbers. For example --cpus=5:2,3:7,6,1 would configure Exact Capture to run the management thread on CPU 5, with two NIC listener threads on on CPUs 2 and 3 respectively, and three (or more) disk writer threads on cores 1,6 & 7 respectively. Note: the number of listener CPUs must be exactly equal to the number of ExaNIC --interfaces in use. Furthermore listener threads cannot share CPUs with management or writer threads. If there are fewer writer threads than --outputs , writer threads will be reused. k no-kernel (flag) Prevents packets from reaching the kernel, by disabling interrupt generation for packets arriving on the ports used by exact-capture. It is recommended to always enable this option, to ensure the best performance from exact-capture. s snaplen 2048B In some cases it is not necessary / useful to capture the entire packet. Set the snap length to determine the maximum size of packet that can be captured. This value cannot be 0 or less. m maxfile 0 (unlimited) High rate capture can produce very large file sizes. To reduce the file sizes, Exact Capture can cap the file size to a maximum, and will start a new file each time it is reached. A value of 0 or less puts no limit on the output file size. l logfile (none) Exact capture can optionally write log messages to a log file specified. t log-report-int 1.0 This sets the statistics calculation and logging interval in seconds. v verbose (flag) Enabling verbose mode will produce 2 output log lines every log interval (see above). These log lines will include summary statistics of the performance of all listener threads and all writer threads. V more-verbose (flag) Enabling more verbose mode will produce 1 output log line for every listener and writer thread. Each log line will include per-thread statistics counters/statistics. This can be combined with --verbose mode above. d debug-logging (flag) Debug logging mode enables display of the full file path, process ID and thread ID in each output log line. This is useful to track where a given log message originated. T no-log-ts (flag) By default, logs include a timestamp. This can make the output overly verbose. Use this flag to disable timestamps. w no-warn-overflow (flag) Software overflows will produce a warning. This may be problematic if the system is underperforming and these happen often. The flag disables these warnings. S no-spin (flag) By default Exact Capture outputs a progress \u201cspinner\u201d to the console. This flag disables it. n no-promisc (flag) By default Exact Capture puts the NIC into promiscuous mode. This flag disables it. p perf-test (flag) Exact Capture supports several performance testing modes. These can be used to give a sense of the best possible performance that you can expect from your system configuration. The modes are as follows: No performance testing Replace all ExaNIC interfaces with a dummy interface. ExaNICs are no longer a performance limitation. This tests the maximum possible receive rate that your system can achieve for 64B frames. Note that 10GbE line-rate with 64B frames is about 7Gb/s (due to Ethernet interfame gap overheads). Replace the internal memory queue with a dummy interface on both sides. This tests the maximum performance possible when when system memory is not the bottleneck. This is also a good test of disk writing speed (for minimum sized packets). Replace the ExaDisk interface with a dummy. This tests the performance through the system when disk writing speed is not a limitation. This may be helpful to debug cases where your disks are not configured/performing correctly. Replace both the ExaNIC and the internal memory ring with dummies. Can be used to measure the absolute best performance possible when NICs and memory are not the limitations. Can also help to find interference bugs between ExaNICs and ExaDisks sharing limited PCIe bandwidth. Replace the ExaNIC and ExaDisk with dummies. This is useful for testing the maximum achievable application throughput, including through system memory, but excluding reading from and writing to real hardware. Replace the memory queues and ExaDisk with dummies. Can be help to find interference bugs between ExaNICs and ExaDisks sharing limited PCIe bandwidth. Replace the ExaNIC, memory queue and ExaDisk interfaces with dummies. Useful for determining the overheads within the application (i.e. CPU speed) issues.","title":"Configuration Guide"},{"location":"expcap/","text":"Exact Capture outputs packet captures to a modified pcap format called expcap . The expcap format is a backwards compatible extension to standard pcap format. A number of tools and utilities are included for operating on these files, including converting them into standard pcap format if necessary. For reference, standard pcap files are formatted as follows (more details can be found on the Wireshark website): Padding Packets As a performance optimisation, Exact Capture occasionally needs to insert padding packets (e.g. to align to a 4k boundary) into the output file. These packets are easily recognizable because pcap header wire length field (as above) is set to 0B, with the on disk length field (again as above) is set to the size of the padding. Although setting these header fields precisely captures the semantics of the padding packets (i.e bytes written to disk that were never found on the wire), this is technically a pcap file specification violation. Presumably the writers never envisaged this kind of use case. Nevertheless, standard tools like Wireshark operate correctly and ignore these packets as they should. The following figure depicts a padding packet directly after the file header. This will be found in all Exact Capture output files. Packet Footers Each captured packet is extended with a packet footer. This footer contains a variety of extra fields, not available in the standard pcap format. When the footer is added, the standard pcap disk bytes field is updated to reflect the extra length on disk. Once again, this means that the byes on disk value may exceed the bytes on the wire value (though not always. e.g. when a snaplength is set). The addition of a footer adds bytes to the disk that were never found on the wire is again, technically a PCAP specification violation. However, once again, standard pcap processing tools like Wireshark operate correctly and ignore these extra bytes as they should. The above figure shows a representation of expcap packet footers added to the first packet. The additional expcap footer fields are described in detail in the table below. They borrow the spirit of some of the fields found in the ERF format. Field Width (bits) Description Time (seconds) 32 Time in seconds since the epoch Time (picoseconds) 40 Time in picoseconds since the last second boundary Flags 8 The following flags bits are currently supported: New CRC Calculated (The CRC field contains a new new value including the footer) Frame aborted - this frame was aborted on the wire by the sender. Frame corrupt - the hardware CRC checker detected an error with this frame. Frame truncated - this packet was longer than the snap length and has been truncated. Device ID Number 8 The ID of the device that captured these packets. For example, when capturing on the exanic3:7 interface, the device number would be 3. Port ID Number 8 The port on the device that was used to capture the packet. For example, capturing on exanic3:7 interface, the port number would be 7. CRC top 16 If the new CRC flag is not set, contains the number of packets dropped between this packet and the previous packet. Otherwise this is the top 16 bits of the new CRC. CRC bottom 16 If the new CRC flag is set, contains the bottom 16 bits of the new CRC. Otherwise, unused.","title":"Output Format (expcap)"},{"location":"expcap/#padding-packets","text":"As a performance optimisation, Exact Capture occasionally needs to insert padding packets (e.g. to align to a 4k boundary) into the output file. These packets are easily recognizable because pcap header wire length field (as above) is set to 0B, with the on disk length field (again as above) is set to the size of the padding. Although setting these header fields precisely captures the semantics of the padding packets (i.e bytes written to disk that were never found on the wire), this is technically a pcap file specification violation. Presumably the writers never envisaged this kind of use case. Nevertheless, standard tools like Wireshark operate correctly and ignore these packets as they should. The following figure depicts a padding packet directly after the file header. This will be found in all Exact Capture output files.","title":"Padding Packets"},{"location":"expcap/#packet-footers","text":"Each captured packet is extended with a packet footer. This footer contains a variety of extra fields, not available in the standard pcap format. When the footer is added, the standard pcap disk bytes field is updated to reflect the extra length on disk. Once again, this means that the byes on disk value may exceed the bytes on the wire value (though not always. e.g. when a snaplength is set). The addition of a footer adds bytes to the disk that were never found on the wire is again, technically a PCAP specification violation. However, once again, standard pcap processing tools like Wireshark operate correctly and ignore these extra bytes as they should. The above figure shows a representation of expcap packet footers added to the first packet. The additional expcap footer fields are described in detail in the table below. They borrow the spirit of some of the fields found in the ERF format. Field Width (bits) Description Time (seconds) 32 Time in seconds since the epoch Time (picoseconds) 40 Time in picoseconds since the last second boundary Flags 8 The following flags bits are currently supported: New CRC Calculated (The CRC field contains a new new value including the footer) Frame aborted - this frame was aborted on the wire by the sender. Frame corrupt - the hardware CRC checker detected an error with this frame. Frame truncated - this packet was longer than the snap length and has been truncated. Device ID Number 8 The ID of the device that captured these packets. For example, when capturing on the exanic3:7 interface, the device number would be 3. Port ID Number 8 The port on the device that was used to capture the packet. For example, capturing on exanic3:7 interface, the port number would be 7. CRC top 16 If the new CRC flag is not set, contains the number of packets dropped between this packet and the previous packet. Otherwise this is the top 16 bits of the new CRC. CRC bottom 16 If the new CRC flag is set, contains the bottom 16 bits of the new CRC. Otherwise, unused.","title":"Packet Footers"},{"location":"install/","text":"Source Code and Licensing Exact Capture is available from github.com as an open source project. If you would like to discuss alternative licensing schemes, please contact the Exablaze sales team. Hardware Requirements Exact Capture requires a high performance server to operate optimally. Please read the Server Requirements for more details. Software Requirements To build the software, you will need a recent C compiler supporting C99 or higher, and to have installed the ExaNIC software libraries (also available from github.com). Building There are 3 build options for Exact Capture: Performance build Error assertions build Debug build By default, Exact Capture is built in performance mode. In performance mode, unnecessary internal error checking is disabled. For example, bounds checks on memory access. To build Exact Capture in performance mode, simply run make in the top level. To build a version with stricter internal error checking assertions, run make assert . This version is still capable of operating at 10Gb/s on many systems, though will suffer marginal performance degradation, especially on slower CPUs. To build a debug version, run make debug . The debug build applies stricter warning checking requirements at build time, and enables detailed debug tracing throughout the application. This version is unlikely to keep up at high-rate. (un)Installation To install Exact Capture, run make install as the root user. To uninstall, run make uninstall as the root user.","title":"Installation"},{"location":"install/#source-code-and-licensing","text":"Exact Capture is available from github.com as an open source project. If you would like to discuss alternative licensing schemes, please contact the Exablaze sales team.","title":"Source Code and Licensing"},{"location":"install/#hardware-requirements","text":"Exact Capture requires a high performance server to operate optimally. Please read the Server Requirements for more details.","title":"Hardware Requirements"},{"location":"install/#software-requirements","text":"To build the software, you will need a recent C compiler supporting C99 or higher, and to have installed the ExaNIC software libraries (also available from github.com).","title":"Software Requirements"},{"location":"install/#building","text":"There are 3 build options for Exact Capture: Performance build Error assertions build Debug build By default, Exact Capture is built in performance mode. In performance mode, unnecessary internal error checking is disabled. For example, bounds checks on memory access. To build Exact Capture in performance mode, simply run make in the top level. To build a version with stricter internal error checking assertions, run make assert . This version is still capable of operating at 10Gb/s on many systems, though will suffer marginal performance degradation, especially on slower CPUs. To build a debug version, run make debug . The debug build applies stricter warning checking requirements at build time, and enables detailed debug tracing throughout the application. This version is unlikely to keep up at high-rate.","title":"Building"},{"location":"install/#uninstallation","text":"To install Exact Capture, run make install as the root user. To uninstall, run make uninstall as the root user.","title":"(un)Installation"},{"location":"quick/","text":"To run Exact Capture on a single 10GbE interface, writing to a single disk slice, the following command line is sufficient: $ exact-capture --input=exanic0:0 --output=/data0/ --cpus=0:1:2 Note Canonical Linux interface names such as \u201ceth1\u201d or \u201cenp0s1\u201d can be freely used in place of Exablaze ExaNIC device names (e.g. \u201cexanic0:0\u201d). The interface must however be an ExaNIC. Note The CPU specification is a colon (\u201c:\u201d) separated list containing the management CPU, the ExaNIC listener thread CPU(s), and the ExaDisk writer thread CPU(s). It is assumed that CPU cores have been isolated according to the System Configuration instructions above. For more details see configuration options To run exact capture on a pair of 10GbE interfaces, writing to a two disk slices, using 5 cpu cores (management core = 0, NIC listener cores = 1,2, disk writer cores = 3,4): $ exact-capture --input=exanic0:0 --input=exanic0:1 --output=/data0/ --output=/data1/ --cpus=0:1,2:3,4","title":"Quick Start"},{"location":"server/","text":"You are free to run Exact Capture on any system hardware. The following table describes our recommendations for the minimum system hardware requirements. For general guidance, we have successfully run the system on suitably configured Dell R230 and R730 machines. Any of the Dell R 30 and R 40 machines are likely to be excellent candidates. CPUs Core Count The number of CPU cores required depends on: The number of interfaces that you wish to capture on The type and speed of the disk drives The maximum capture rate you need to sustain Assuming that ExaDisks are the target drives, each drive slice is capable of writing at a sustained rate of 10Gb/s. As an example, a minimal 10Gb/s Exact Capture installation will require 3 CPU cores. One core for a (hot) listener thread, one core for a (cold) disk writer thread and one management core. The management core is low priority and can be safely shared with other general purpose system cores. The listener thread should not be shared with any other process (i.e. be sure to make use of the isolcpus kernel parameter). In general, for n line-rate 10G ports, the system requires 2n + 1 CPU cores. e.g a 4x10G capture system will require 9 cores in total. Warning CPU core counts are based on actual cores, rather than hyperthreads. In general, we recommend disabling hyperthreads on CPUs that support them. Tip We have had good results with Intel Xeon E5-26xx range CPUs with a 3Ghz+ clock speed. For example the Intel Xeon E5-2643. Speed The minimum required CPU speed depends on the maximum capture rate required. For the purposes of this document, we assume that 10G line rate, at minimum sized (64B) frames is the capture rate requirement (i.e. approx. 14 million packets per second ). Tip We have found that 3Ghz+ CPUs are sufficient. RAM RAM usage will vary based on the number of NICs and disks that you are using. By default, each memory queue is organised into 256x 2MB slots for a total memory usage of approximately 512MB per queue. The total number of memory queues the product of the number of hot (ExaNIC) and cold (ExaDisk) threads. For a minimal 10Gb/s capture solution, with a single ExaNIC and ExaDisk, only 1 memory queue is required for a total of approximately 512MB of memory. For 4x10Gbs system, with 4 disks, 4x4 = 16 queues will be required, for a minimum memory usage of ~8GB. Tip We recommend at least 16GB of DDR IV RAM in your machine. PCIe For sustained, minimum sized packet capture, each 10Gb/s ExaNIC interface requires approximately 4x PCIe Gen 3 lanes. The hot threads must run on the CPU socket directly connected to these PCIe lanes. For sustained high performance writing, each ExaDisk interface requires 2x PCIe Gen 3 lanes. The cold threads must run on the CPU socket directly connected to these PCIe lanes. Tip For optimal performance, w recommend running PCIe Gen3x8 for all cards connected. ExaNIC All ExaNIC network cards will work with Exact Capture. Following is a summary of the features, requirements and limitations of each card: ExaNIC X10 / GM (2x 10GbE) - these cards can be used without restriction on suitable PCIe Gen 3x8 slots. Timestamp resolution is 6.2ns. ExaNIC HPT (2x 10GbE) - these cards can be used without restriction on suitable PCIe Gen 3x8 slots. Timestamp resolution is 0.25ns (250ps) ExaNIC X40 / VXP (8x 10GbE) - Only 2 ports can be used at line rate for all packet sizes. Up to 4 ports can be used at larger (average) packet sizes (e.g. 512B+). Timestamp resolution is 6.2ns. ExaNIC X40 (2x 40GbE) - Speeds up to 20Gb/s are likely to work out of the box on any single interface (though this is untested). Load balancing/packet spraying across multiple receive rings is also likely to assist line rate capture, though this is feature is not (yet) implemented. Tip ExaNIC X10 and ExaNIC HPT devices are currently optimal. Disk Drives Exact Capture is tested and optimized to run on ExaDisk FX1 NVMe SSD drives. Each ExaDisk is capable of running 40Gb/s sustained write speed to disk in a PCIe Gen 3x 8 slot. The drives are currently available in 4TB and 8TB capacities. The system will (in principle) operate with any disks. High speed flash drives, especially NVMe disks are highly recommended to keep the number of threads and memory usage down. For slower disks (e.g. SATA based flash disks) sharing CPU cores for writer threads is likely to reduce the CPU core count requirements without affecting overall performance. This is untested. Tip ExaDISK FX1 (8TB) is the recommended disk drive","title":"Server Requirements"},{"location":"server/#cpus","text":"","title":"CPUs"},{"location":"server/#ram","text":"RAM usage will vary based on the number of NICs and disks that you are using. By default, each memory queue is organised into 256x 2MB slots for a total memory usage of approximately 512MB per queue. The total number of memory queues the product of the number of hot (ExaNIC) and cold (ExaDisk) threads. For a minimal 10Gb/s capture solution, with a single ExaNIC and ExaDisk, only 1 memory queue is required for a total of approximately 512MB of memory. For 4x10Gbs system, with 4 disks, 4x4 = 16 queues will be required, for a minimum memory usage of ~8GB. Tip We recommend at least 16GB of DDR IV RAM in your machine.","title":"RAM"},{"location":"server/#pcie","text":"For sustained, minimum sized packet capture, each 10Gb/s ExaNIC interface requires approximately 4x PCIe Gen 3 lanes. The hot threads must run on the CPU socket directly connected to these PCIe lanes. For sustained high performance writing, each ExaDisk interface requires 2x PCIe Gen 3 lanes. The cold threads must run on the CPU socket directly connected to these PCIe lanes. Tip For optimal performance, w recommend running PCIe Gen3x8 for all cards connected.","title":"PCIe"},{"location":"server/#exanic","text":"All ExaNIC network cards will work with Exact Capture. Following is a summary of the features, requirements and limitations of each card: ExaNIC X10 / GM (2x 10GbE) - these cards can be used without restriction on suitable PCIe Gen 3x8 slots. Timestamp resolution is 6.2ns. ExaNIC HPT (2x 10GbE) - these cards can be used without restriction on suitable PCIe Gen 3x8 slots. Timestamp resolution is 0.25ns (250ps) ExaNIC X40 / VXP (8x 10GbE) - Only 2 ports can be used at line rate for all packet sizes. Up to 4 ports can be used at larger (average) packet sizes (e.g. 512B+). Timestamp resolution is 6.2ns. ExaNIC X40 (2x 40GbE) - Speeds up to 20Gb/s are likely to work out of the box on any single interface (though this is untested). Load balancing/packet spraying across multiple receive rings is also likely to assist line rate capture, though this is feature is not (yet) implemented. Tip ExaNIC X10 and ExaNIC HPT devices are currently optimal.","title":"ExaNIC"},{"location":"server/#disk-drives","text":"Exact Capture is tested and optimized to run on ExaDisk FX1 NVMe SSD drives. Each ExaDisk is capable of running 40Gb/s sustained write speed to disk in a PCIe Gen 3x 8 slot. The drives are currently available in 4TB and 8TB capacities. The system will (in principle) operate with any disks. High speed flash drives, especially NVMe disks are highly recommended to keep the number of threads and memory usage down. For slower disks (e.g. SATA based flash disks) sharing CPU cores for writer threads is likely to reduce the CPU core count requirements without affecting overall performance. This is untested. Tip ExaDISK FX1 (8TB) is the recommended disk drive","title":"Disk Drives"},{"location":"tuning/","text":"Performance Tuning Ensuring that the correct options and server settings ensures that exact-capture is running in an optimal manner. This document will detail a number of performance tuning techniques that can be used to improve the behaviour of exact-capture. Getting started The ExaNIC documentation covers a number of useful tuning techniques in order to ensure that ExaNICs are being used in an optimal manner. Many of these optimizations will also improve capture performance. The user should consult the following sections of the ExaNIC benchmarking guide before reading on: BIOS Configuration Kernel Build Configuration Kernel Boot Configuration Hardware Configuration NUMA systems On multi-socket systems, users should take care to ensure that capture hardware is local to a single socket. Pushing capture traffic over a CPU interconnect will lead to suboptimal capture performance, as traffic may be bottlenecked by this inter-CPU connection. The output of lspci can be used to determine the NUMA locality of installed hardware. On a server which has two ExaNICs and one ExaDisk installed, the NUMA locality can be quickly determined: [root@capture ~]# lspci -d 1ce4: -vvv |grep NUMA NUMA node: 1 NUMA node: 1 NUMA node: 1 NUMA node: 1 NUMA node: 1 NUMA node: 1 NUMA node: 1 NUMA node: 1 The -d option when used with lspci allows the user to filter the devices displayed by vendor ID. Exablaze devices have the vendor ID 1ce4 and on this server where ExaDisks are in use, the NUMA node used by both the ExaNIC and ExaDisk can be queried in a single command. If ExaDisks are not in use, users should query lspci using the correct vendor ID for their own disks. Once the node of the installed hardware is known, the user should note which logical CPU cores are part of this node. This can be determined by the lspcu command: [root@capture ~]# lscpu |grep NUMA NUMA node(s): 2 NUMA node0 CPU(s): 0,2,4,6,8,10 NUMA node1 CPU(s): 1,3,5,7,9,11 On this system, the only cores that should be used for listen/write threads are 1,3,5,7,9,11 which are local to the same NUMA node as the hardware that will be used for packet capture. CPU configuration Ensuring that the user's CPU is correctly configured is vital to ensuring the performance of exact-capture. Any CPU cores that are used for listen/write threads should be configured as part of the Kernel Boot Configuration guide referenced earlier. These cores need to be specified in the isolcpus , nohz_full and rcu_nocbs parameters. Before starting exact-capture, ensure that the CPU cores to be used are not running in a power-saving state. One way to ensure the CPU is not running in a power-saving state before starting exact-capture is to cause all cores to (temporarily) spin on writing 0's to /dev/null/ : for cpu in {0..11} do taskset -c $cpu timeout 10 dd if=/dev/zero of=/dev/null & done After doing so, check the running frequency of the selected CPU cores (our CPU has a max frequency of 3.6Ghz, per the ouput of lscpu ): for cpu in /sys/devices/system/cpu/cpu*/cpufreq do cat $cpu/cpuinfo_cur_freq done 3601078 This confirms that all of the CPU cores on this server will run at their max frequency, before starting exact-capture. CPU core selection Exact-capture's --cpus option allows the user to select which CPU cores are allocated for management, listen and write threads (see the Configuration Guide and Internal Architecture for more information). The cores chosen for listen/write threads should be configured per the CPU configuration section. The core chosen for management does not need to be isolated, but it should not be shared with the cores used for listen/write threads. Interrupt configuration Both ExaNICs and capture disks can raise interrupts which can adversely impact the performance of exact-capture if the host is not configured appropriately. Servicing interrupts on cores used by listener threads is very disruptive to the performance of listener threads. When an interrupt is serviced by a core which is being used by a listener thread, the cached instructions belonging to the listener thread will be lost as the CPU fetches the instructions for the interrupt handler. That core will then execute the interrupt handler and finally return control to the listener thread (which will need to fetch it's instructions from memory all over again). To ensure that exact-capture can maintain losseless packet capture at high data rates, interrupts should not be serviced on cores used by listener threads. While exact capture is running, examine the output of cat /proc/interrupts to determine whether the which cores are servicing interrupts: [root@capture ~]# cat /proc/interrupts | grep -E 'CPU|exanic|nvme' CPU0 CPU1 CPU2 CPU3 CPU4 CPU5 CPU6 CPU7 CPU8 CPU9 CPU10 CPU11 57: 50931 29339 0 0 0 40 0 0 0 0 0 0 PCI-MSI-edge nvme0q0, nvme0q1 59: 52418 29480 0 0 0 56 0 0 0 0 0 0 PCI-MSI-edge nvme1q0, nvme1q1 ... 116: 21370 33252 0 0 0 0 0 0 0 0 0 0 PCI-MSI-edge nvme4q7 117: 0 0 0 0 0 0 0 0 0 0 0 0 PCI-MSI-edge nvme4q8 143: 205804 16367 0 0 0 0 0 0 0 0 0 0 PCI-MSI-edge exanic0 145: 108387 15031 0 0 0 0 0 0 0 0 0 0 PCI-MSI-edge exanic1 Note the IRQ number in the leftmost column. On this server, CPU1 is still servicing interrupts for both NVMe storage drives and the ExaNICs (there may be other devices also raising interrupts on these cores). This will impede the performance of exact-capture, if listen threads are started on CPU0 or CPU1. Interrupt steering can be configured by setting smp_affinity correctly in procfs. smp_affinity is a bitmask which determines which CPUs can be used to service a given IRQ number, where the least significant bit corresponds to CPU0. First, force all interrupts to be serviced by CPU0: echo 1 > /proc/irq/default_smp_affinity for i in $(ls /proc/irq/); do echo 1 > /proc/irq/$i/smp_affinity ; done Next, allow any CPU cores not used by listener cores to service interrupts generated by the capture disks. For this server, CPU0 is used for management, CPU1 and CPU3 are used for listener threads and CPU5, CPU7, CPU9 and CPU11 are used for writer threads: ./bin/exact-capture --cpus 0:1,3:5,7,9,11 ... In this case, the correct value for the smp_affinity bitmask is 111111110101 , or FF5 . This will mask off CPU1 and CPU3 and allow interrupts to capture disks to be serviced on any core. The correct IRQ numbers can be determined from the output of cat /proc/interrupts as above. In this case, the capture disks have IRQ numbers 57-117. With this in mind, setting the smp_affinity for each IRQ number can be achieved by the following command: for i in {57..117}; do echo FF5 > /proc/irq/$i/smp_affinity ; done The kernel documentation for IRQ affinity offers a detailed guide for configuring smp_affinity values. Note It is recommended to disable interrupt generation completely for ExaNICs which are solely used for packet capture. This can be achieved by enabling Bypass-only mode , which can be automatically enabled by exact-capture by supplying the --no-kernel option. Troubleshooting The --perf-test option offers a number of utilities useful for diagnosing performance bottlenecks in a given system. These options can be combined with the --verbose and --more-verbose 2 to assess whether a server has been optimally configured. Check the Configuration Guide for the list of supported performance testing options. For example, the --perf-test 3 can be used to evaluate the write performance of a given system: ./bin/exact-capture -i exanic0:0 -i exanic0:1 -o /mnt/exadisk0/test0 -o /mnt/exadisk1/test1 -o /mnt/exadisk2/test2 -o /mnt/exadisk3/test3 -c 0:1,3:5,7,9,11 -k -v -V 2 -p 2 ... [20200908T112533.543]: Listener:00 exanic0:0 (0.0) -- 0.00Gbps 0.00Mpps (HW:0.00iMpps) 0.00MB 0 Pkts (HW:0 Pkts) [lost?:0] (4569.582M Spins1 0.000M SpinsP ) 0errs 0drp 0swofl 0hwofl [20200908T112533.543]: Listener:01 exanic0:1 (0.1) -- 0.00Gbps 0.00Mpps (HW:0.00iMpps) 0.00MB 40 Pkts (HW:40 Pkts) [lost?:0] (4562.232M Spins1 0.000M SpinsP ) 0errs 0drp 0swofl 0hwofl [20200908T112533.543]: Total - All Listeners -- 0.00Gbps 0.00Mpps (HW:0.00iMpps) 0.00MB 40 Pkts (HW:40 Pkts) [lost?:0] (9131.814M Spins1 0.000M SpinsP ) 0errs 0drp 0swofl 0hwofl [20200908T112533.543]: Writer:00 .t/exadisk0/test0 -- 6.55Gbps (6.55Gbps wire 9.82Gbps disk) 12.79Mpps 16212.34MB (16212.34MB 24320.00MB) 265623040 Pkts 0.000M Spins [20200908T112533.543]: Writer:01 .t/exadisk0/test0 -- 5.41Gbps (5.41Gbps wire 8.12Gbps disk) 10.57Mpps 13397.85MB (13397.85MB 20098.00MB) 219510356 Pkts 0.000M Spins [20200908T112533.543]: Writer:02 .t/exadisk0/test0 -- 6.00Gbps (6.00Gbps wire 9.00Gbps disk) 11.72Mpps 14851.09MB (14851.09MB 22278.00MB) 243320316 Pkts 0.000M Spins [20200908T112533.543]: Writer:03 .t/exadisk0/test0 -- 6.05Gbps (6.05Gbps wire 9.08Gbps disk) 11.83Mpps 14989.75MB (14989.75MB 22486.00MB) 245592092 Pkts 0.000M Spins [20200908T112533.543]: Total - All Writers -- 24.01Gbps (24.01Gbps wire 36.02Gbps disk) 46.90Mpps 59451.04MB (59451.04MB 89182.00MB) 974045804 Pkts 0.000M Spins Exact Capture finished HW Received: 40 packets ( 0.000 MP/s ) SW Received: 40 packets ( 0.000 MP/s ) 0 MB ( 0.000 Gb/s ) SW Wrote: 974045804 packets ( 46.902 MP/s ) 59451 MB ( 24.014 Gb/s ) Lost HW/SW (?): 0 packets ( 0.000 MP/s ) Lost RX/WR: 0 packets ( 0.000 MP/s ) 0 MB ( 0.000 Gb/s ) Dropped: 0 packets ( 0.000 MP/s ) SW Overflows: 0 times ( 0.000 /s ) We can observe that this system is capable of writing ~36.02Gbps to the disks specified.","title":"Performance Tuning"},{"location":"tuning/#performance-tuning","text":"Ensuring that the correct options and server settings ensures that exact-capture is running in an optimal manner. This document will detail a number of performance tuning techniques that can be used to improve the behaviour of exact-capture.","title":"Performance Tuning"},{"location":"tuning/#getting-started","text":"The ExaNIC documentation covers a number of useful tuning techniques in order to ensure that ExaNICs are being used in an optimal manner. Many of these optimizations will also improve capture performance. The user should consult the following sections of the ExaNIC benchmarking guide before reading on: BIOS Configuration Kernel Build Configuration Kernel Boot Configuration Hardware Configuration","title":"Getting started"},{"location":"tuning/#numa-systems","text":"On multi-socket systems, users should take care to ensure that capture hardware is local to a single socket. Pushing capture traffic over a CPU interconnect will lead to suboptimal capture performance, as traffic may be bottlenecked by this inter-CPU connection. The output of lspci can be used to determine the NUMA locality of installed hardware. On a server which has two ExaNICs and one ExaDisk installed, the NUMA locality can be quickly determined: [root@capture ~]# lspci -d 1ce4: -vvv |grep NUMA NUMA node: 1 NUMA node: 1 NUMA node: 1 NUMA node: 1 NUMA node: 1 NUMA node: 1 NUMA node: 1 NUMA node: 1 The -d option when used with lspci allows the user to filter the devices displayed by vendor ID. Exablaze devices have the vendor ID 1ce4 and on this server where ExaDisks are in use, the NUMA node used by both the ExaNIC and ExaDisk can be queried in a single command. If ExaDisks are not in use, users should query lspci using the correct vendor ID for their own disks. Once the node of the installed hardware is known, the user should note which logical CPU cores are part of this node. This can be determined by the lspcu command: [root@capture ~]# lscpu |grep NUMA NUMA node(s): 2 NUMA node0 CPU(s): 0,2,4,6,8,10 NUMA node1 CPU(s): 1,3,5,7,9,11 On this system, the only cores that should be used for listen/write threads are 1,3,5,7,9,11 which are local to the same NUMA node as the hardware that will be used for packet capture.","title":"NUMA systems"},{"location":"tuning/#cpu-configuration","text":"Ensuring that the user's CPU is correctly configured is vital to ensuring the performance of exact-capture. Any CPU cores that are used for listen/write threads should be configured as part of the Kernel Boot Configuration guide referenced earlier. These cores need to be specified in the isolcpus , nohz_full and rcu_nocbs parameters. Before starting exact-capture, ensure that the CPU cores to be used are not running in a power-saving state. One way to ensure the CPU is not running in a power-saving state before starting exact-capture is to cause all cores to (temporarily) spin on writing 0's to /dev/null/ : for cpu in {0..11} do taskset -c $cpu timeout 10 dd if=/dev/zero of=/dev/null & done After doing so, check the running frequency of the selected CPU cores (our CPU has a max frequency of 3.6Ghz, per the ouput of lscpu ): for cpu in /sys/devices/system/cpu/cpu*/cpufreq do cat $cpu/cpuinfo_cur_freq done 3601078 This confirms that all of the CPU cores on this server will run at their max frequency, before starting exact-capture.","title":"CPU configuration"},{"location":"tuning/#cpu-core-selection","text":"Exact-capture's --cpus option allows the user to select which CPU cores are allocated for management, listen and write threads (see the Configuration Guide and Internal Architecture for more information). The cores chosen for listen/write threads should be configured per the CPU configuration section. The core chosen for management does not need to be isolated, but it should not be shared with the cores used for listen/write threads.","title":"CPU core selection"},{"location":"tuning/#interrupt-configuration","text":"Both ExaNICs and capture disks can raise interrupts which can adversely impact the performance of exact-capture if the host is not configured appropriately. Servicing interrupts on cores used by listener threads is very disruptive to the performance of listener threads. When an interrupt is serviced by a core which is being used by a listener thread, the cached instructions belonging to the listener thread will be lost as the CPU fetches the instructions for the interrupt handler. That core will then execute the interrupt handler and finally return control to the listener thread (which will need to fetch it's instructions from memory all over again). To ensure that exact-capture can maintain losseless packet capture at high data rates, interrupts should not be serviced on cores used by listener threads. While exact capture is running, examine the output of cat /proc/interrupts to determine whether the which cores are servicing interrupts: [root@capture ~]# cat /proc/interrupts | grep -E 'CPU|exanic|nvme' CPU0 CPU1 CPU2 CPU3 CPU4 CPU5 CPU6 CPU7 CPU8 CPU9 CPU10 CPU11 57: 50931 29339 0 0 0 40 0 0 0 0 0 0 PCI-MSI-edge nvme0q0, nvme0q1 59: 52418 29480 0 0 0 56 0 0 0 0 0 0 PCI-MSI-edge nvme1q0, nvme1q1 ... 116: 21370 33252 0 0 0 0 0 0 0 0 0 0 PCI-MSI-edge nvme4q7 117: 0 0 0 0 0 0 0 0 0 0 0 0 PCI-MSI-edge nvme4q8 143: 205804 16367 0 0 0 0 0 0 0 0 0 0 PCI-MSI-edge exanic0 145: 108387 15031 0 0 0 0 0 0 0 0 0 0 PCI-MSI-edge exanic1 Note the IRQ number in the leftmost column. On this server, CPU1 is still servicing interrupts for both NVMe storage drives and the ExaNICs (there may be other devices also raising interrupts on these cores). This will impede the performance of exact-capture, if listen threads are started on CPU0 or CPU1. Interrupt steering can be configured by setting smp_affinity correctly in procfs. smp_affinity is a bitmask which determines which CPUs can be used to service a given IRQ number, where the least significant bit corresponds to CPU0. First, force all interrupts to be serviced by CPU0: echo 1 > /proc/irq/default_smp_affinity for i in $(ls /proc/irq/); do echo 1 > /proc/irq/$i/smp_affinity ; done Next, allow any CPU cores not used by listener cores to service interrupts generated by the capture disks. For this server, CPU0 is used for management, CPU1 and CPU3 are used for listener threads and CPU5, CPU7, CPU9 and CPU11 are used for writer threads: ./bin/exact-capture --cpus 0:1,3:5,7,9,11 ... In this case, the correct value for the smp_affinity bitmask is 111111110101 , or FF5 . This will mask off CPU1 and CPU3 and allow interrupts to capture disks to be serviced on any core. The correct IRQ numbers can be determined from the output of cat /proc/interrupts as above. In this case, the capture disks have IRQ numbers 57-117. With this in mind, setting the smp_affinity for each IRQ number can be achieved by the following command: for i in {57..117}; do echo FF5 > /proc/irq/$i/smp_affinity ; done The kernel documentation for IRQ affinity offers a detailed guide for configuring smp_affinity values. Note It is recommended to disable interrupt generation completely for ExaNICs which are solely used for packet capture. This can be achieved by enabling Bypass-only mode , which can be automatically enabled by exact-capture by supplying the --no-kernel option.","title":"Interrupt configuration"},{"location":"tuning/#troubleshooting","text":"The --perf-test option offers a number of utilities useful for diagnosing performance bottlenecks in a given system. These options can be combined with the --verbose and --more-verbose 2 to assess whether a server has been optimally configured. Check the Configuration Guide for the list of supported performance testing options. For example, the --perf-test 3 can be used to evaluate the write performance of a given system: ./bin/exact-capture -i exanic0:0 -i exanic0:1 -o /mnt/exadisk0/test0 -o /mnt/exadisk1/test1 -o /mnt/exadisk2/test2 -o /mnt/exadisk3/test3 -c 0:1,3:5,7,9,11 -k -v -V 2 -p 2 ... [20200908T112533.543]: Listener:00 exanic0:0 (0.0) -- 0.00Gbps 0.00Mpps (HW:0.00iMpps) 0.00MB 0 Pkts (HW:0 Pkts) [lost?:0] (4569.582M Spins1 0.000M SpinsP ) 0errs 0drp 0swofl 0hwofl [20200908T112533.543]: Listener:01 exanic0:1 (0.1) -- 0.00Gbps 0.00Mpps (HW:0.00iMpps) 0.00MB 40 Pkts (HW:40 Pkts) [lost?:0] (4562.232M Spins1 0.000M SpinsP ) 0errs 0drp 0swofl 0hwofl [20200908T112533.543]: Total - All Listeners -- 0.00Gbps 0.00Mpps (HW:0.00iMpps) 0.00MB 40 Pkts (HW:40 Pkts) [lost?:0] (9131.814M Spins1 0.000M SpinsP ) 0errs 0drp 0swofl 0hwofl [20200908T112533.543]: Writer:00 .t/exadisk0/test0 -- 6.55Gbps (6.55Gbps wire 9.82Gbps disk) 12.79Mpps 16212.34MB (16212.34MB 24320.00MB) 265623040 Pkts 0.000M Spins [20200908T112533.543]: Writer:01 .t/exadisk0/test0 -- 5.41Gbps (5.41Gbps wire 8.12Gbps disk) 10.57Mpps 13397.85MB (13397.85MB 20098.00MB) 219510356 Pkts 0.000M Spins [20200908T112533.543]: Writer:02 .t/exadisk0/test0 -- 6.00Gbps (6.00Gbps wire 9.00Gbps disk) 11.72Mpps 14851.09MB (14851.09MB 22278.00MB) 243320316 Pkts 0.000M Spins [20200908T112533.543]: Writer:03 .t/exadisk0/test0 -- 6.05Gbps (6.05Gbps wire 9.08Gbps disk) 11.83Mpps 14989.75MB (14989.75MB 22486.00MB) 245592092 Pkts 0.000M Spins [20200908T112533.543]: Total - All Writers -- 24.01Gbps (24.01Gbps wire 36.02Gbps disk) 46.90Mpps 59451.04MB (59451.04MB 89182.00MB) 974045804 Pkts 0.000M Spins Exact Capture finished HW Received: 40 packets ( 0.000 MP/s ) SW Received: 40 packets ( 0.000 MP/s ) 0 MB ( 0.000 Gb/s ) SW Wrote: 974045804 packets ( 46.902 MP/s ) 59451 MB ( 24.014 Gb/s ) Lost HW/SW (?): 0 packets ( 0.000 MP/s ) Lost RX/WR: 0 packets ( 0.000 MP/s ) 0 MB ( 0.000 Gb/s ) Dropped: 0 packets ( 0.000 MP/s ) SW Overflows: 0 times ( 0.000 /s ) We can observe that this system is capable of writing ~36.02Gbps to the disks specified.","title":"Troubleshooting"},{"location":"versions/","text":"Version 1.2 Release date: 5 March 2021 Commit ID: fdf4d555e768d839eb8d98d66aac70ec4f34d4ad Source: https://github.com/exablaze-oss/exact-capture/releases/tag/v1.2 Release Notes: Moved all utilities into /tools directory Moved all utilities to a use common code-base for PCAP read/write operations Add exact-pcap-analyze utility for PCAP statistics generation (useful for performance debugging) Add exact-pcap-modify utility for easy PCAP search/modify operations (useful for switch benchmarking) Improve exact-pcap-extract to understand N3550-F HPT trailer format Improve exact-pcap-extract to filter based on H3550-F HPT trailer format or VLAN tag header Documentation Add performance optimisation and tuning guide Add utility and workflow overview documentation Add exact-pcap-extract detailed documentation Add exact-pcap-match detailed documentation Add exact-pacp-analyze detailed documentation Add exact-pcap-parse detailed documentation Add exact-pcap-modify detailed documentation Version 1.1 Release date: 30 September 2019 Commit ID: 5d337a645987af00fc0d1afa6769ee7ccf62caea Source: https://github.com/exablaze-oss/exact-capture/tree/v1.1 Release Notes: Moved documentation online use mkdocs and github pages Removed PDF documentation Updated readme Version 1.0 Release date: 7 March 2018 Commit ID: 624a3f97bbaddd3cf827387e2352d5f5c662a7e5 Source: https://github.com/exablaze-oss/exact-capture/tree/v1.0 Release Notes: Initial release of Exact Capture PDF documentation included in repo","title":"Version History"},{"location":"versions/#version-12","text":"Release date: 5 March 2021 Commit ID: fdf4d555e768d839eb8d98d66aac70ec4f34d4ad Source: https://github.com/exablaze-oss/exact-capture/releases/tag/v1.2 Release Notes: Moved all utilities into /tools directory Moved all utilities to a use common code-base for PCAP read/write operations Add exact-pcap-analyze utility for PCAP statistics generation (useful for performance debugging) Add exact-pcap-modify utility for easy PCAP search/modify operations (useful for switch benchmarking) Improve exact-pcap-extract to understand N3550-F HPT trailer format Improve exact-pcap-extract to filter based on H3550-F HPT trailer format or VLAN tag header Documentation Add performance optimisation and tuning guide Add utility and workflow overview documentation Add exact-pcap-extract detailed documentation Add exact-pcap-match detailed documentation Add exact-pacp-analyze detailed documentation Add exact-pcap-parse detailed documentation Add exact-pcap-modify detailed documentation","title":"Version 1.2"},{"location":"versions/#version-11","text":"Release date: 30 September 2019 Commit ID: 5d337a645987af00fc0d1afa6769ee7ccf62caea Source: https://github.com/exablaze-oss/exact-capture/tree/v1.1 Release Notes: Moved documentation online use mkdocs and github pages Removed PDF documentation Updated readme","title":"Version 1.1"},{"location":"versions/#version-10","text":"Release date: 7 March 2018 Commit ID: 624a3f97bbaddd3cf827387e2352d5f5c662a7e5 Source: https://github.com/exablaze-oss/exact-capture/tree/v1.0 Release Notes: Initial release of Exact Capture PDF documentation included in repo","title":"Version 1.0"},{"location":"tools/analyze/","text":"Exact PCAP Analyze Exact PCAP analyze ( exact-pcap-analyze ) is a tool used to analyze .pcap files and derive a number of statistics concerning a given capture. It will determine the total length of the capture (in nanoseconds, microseconds and seconds), the average packet rate (in pps, packets per second), the minimum/maximum inter-frame gaps (IFGs) and the throughput rate (in gigabits per second). The following table lists all commands available: Short Long Default Description i input (required) The input .pcap file to analyze. f format (required) The input file format. Valid values are pcap or expcap . r line-rate (required) The line rate of traffic in the input capture. This value is in Gbps, e.g. 10 = 10Gb/s. o offset 0 Start analyzing packets from this packet offset into the input file. m max -1 (no limit) Limit the number of packets to analyze. w window 100 Analyze packets within this window. Analysis occurs each time this window is exceeded in the input capture.","title":"Exact PCAP Analyze"},{"location":"tools/analyze/#exact-pcap-analyze","text":"Exact PCAP analyze ( exact-pcap-analyze ) is a tool used to analyze .pcap files and derive a number of statistics concerning a given capture. It will determine the total length of the capture (in nanoseconds, microseconds and seconds), the average packet rate (in pps, packets per second), the minimum/maximum inter-frame gaps (IFGs) and the throughput rate (in gigabits per second). The following table lists all commands available: Short Long Default Description i input (required) The input .pcap file to analyze. f format (required) The input file format. Valid values are pcap or expcap . r line-rate (required) The line rate of traffic in the input capture. This value is in Gbps, e.g. 10 = 10Gb/s. o offset 0 Start analyzing packets from this packet offset into the input file. m max -1 (no limit) Limit the number of packets to analyze. w window 100 Analyze packets within this window. Analysis occurs each time this window is exceeded in the input capture.","title":"Exact PCAP Analyze"},{"location":"tools/extract/","text":"Exact Extract Exact Extract is a utility that extracts packets from one or more expcap files and writes them out into a user-specified format. It outputs capture files that are ordered by the expcap timestamps present in the original capture. $ exact-pcap-extract -i cap0-0.expcap -w extracted -a -f expcap Note Exact Extract can take multiple expcap files as its input. It will search for the earliest timestamp in all of the input capture files. This means that the first packet written out will be the packet with the earliest timestamp across all of the input files. The following table lists all commands available: Short Long Default Description i input (required) The expcap files to extract packets from. w write (required) The filename used for extracted packets. Exact Extract will automatically append .pcap to the filename. W write-dir (none) The directory used to write extracted packets. If used in conjunction with '--write', packets are extracted to {write-dir}/{write}.pcap. It must be specified if steering options (--steer) are in use. p port -1 Only extract packets that were captured on the specified port number. If this is not specified and '--device' is not set, the user must use '--all' to extract packets that were captured on all ports. d device -1 Only extract packets that were captured on the specified device number (i.e., 0 corresponds to exanic0). If this is not specified and '--port' is not set, the user must use '--all' to extract packets that were captured on all ports. a all (flag) Extract packets that were captured on all ports and all devices. This flag must be set if neither '--port' or '--device' are specified. f format expcap The file format to use when writing out packets. Valid options are 'pcap' and 'expcap'. c count 0 (no limit) The maximum number of files to write out in total. M maxfile 0 (128MB) The maximum file size for output files, in MB. Output files will never exceed 128MB, regardless of the value specified with this option. If the output must be spread over multiple files, Exact Extract will append _n to the filename, where n is the current segment being written out (starting from 1). u usepcap (flag) If set, Exact Extract will write pcap timestamps in the microsecond format. S snaplen 1518 The limit in bytes for each individual packet in the output file. r skip-runts (flag) If this flag is set, runt frames will not be written to the output D allow-duplicates (flag) By default, Exact Extract will write over files which have the same name as specified by '--write'. If this flag is set, it will instead create a file with a duplicate name, and append __n to the duplicate file, where n is the current number of files with the same name. t hpt-trailer (flag) If this flag is set, Exact Extract will assume that each packet terminates in a Fusion HPT timestamp trailer. It will extract the timestamp from this trailer and write it to the pcap header (in microsecon/nanosecond format) and to the expcap trailer (in picosecond format) for all output files. Note: this option assumes all packets in the input captures have Fusion HPT trailers. If this is not true, the pcap/expcap timestamp fields will contain invalid values in the output file(s). s steer (null) --steer accepts one of the following values as valid options: hpt, vlan, expcap. A directory must be specified when using this option (via '--write-dir') If this option is set, Exact Extract will steer packets to separate files depending upon their content. Specifying '--steer vlan' will cause packets to be steered to separate files depending upon their VLAN ID. For example, packets with VLAN ID 100 will be steered to the file {write-dir}/{write}_vlan_100.pcap. Packets which do not have an 8021.Q tag will be written to the file named {write-dir}/{write}.pcap. Specifying '--steer hpt' will cause packets to be steered to separate files depending upon their Fusion HPT trailer, using the device ID and port number. For example, files with device ID 0 and port number 10 will be steered to the file {write-dir}/{write}_device_0_port_10.pcap. Note: use of this option assumes that all packets in the input file(s) have a Fusion HPT trailer. Specifying '--steer expcap' will cause packets to be steered to separate files depending upon their expcap footer, using the device ID and port number. For example, files with device ID 0 and port number 10 will be steered to the file {write-dir}/{write}_device_0_port_10.pcap. Note: use of this option assumes that all packets in the input file(s) have an expcap footer. Note Depending upon the options specified by, Exact Extract may attempt to keep more files open simultaneously than is allowed the OS. If it is unable to override this limit, it will need to close and open outputs each time a packet is written in order to ensure that it does not exceed this limit. This can degrade the performance of Exact Extract, due to the additional overhead of repeatedly opening and closing output files. On Linux, it is possible to override the number of open file descriptors limit by giving Exact Extract the \"CAP_SYS_RESOURCE\" capability to the binary. This can be accomplished by running: $ sudo setcap cap_sys_resouce+ep exact-pcap-extract The full list of permissions granted by CAP_SYS_RESOURCE is available on the capabilities(7) man page. Granting Exact Extract this permission should improve its performance, however it is not a requirement. Users will receive the warning \"Could not raise the limit on concurrently open files\" if they are exceeding the open file limit.","title":"Exact PCAP Extract"},{"location":"tools/extract/#exact-extract","text":"Exact Extract is a utility that extracts packets from one or more expcap files and writes them out into a user-specified format. It outputs capture files that are ordered by the expcap timestamps present in the original capture. $ exact-pcap-extract -i cap0-0.expcap -w extracted -a -f expcap Note Exact Extract can take multiple expcap files as its input. It will search for the earliest timestamp in all of the input capture files. This means that the first packet written out will be the packet with the earliest timestamp across all of the input files. The following table lists all commands available: Short Long Default Description i input (required) The expcap files to extract packets from. w write (required) The filename used for extracted packets. Exact Extract will automatically append .pcap to the filename. W write-dir (none) The directory used to write extracted packets. If used in conjunction with '--write', packets are extracted to {write-dir}/{write}.pcap. It must be specified if steering options (--steer) are in use. p port -1 Only extract packets that were captured on the specified port number. If this is not specified and '--device' is not set, the user must use '--all' to extract packets that were captured on all ports. d device -1 Only extract packets that were captured on the specified device number (i.e., 0 corresponds to exanic0). If this is not specified and '--port' is not set, the user must use '--all' to extract packets that were captured on all ports. a all (flag) Extract packets that were captured on all ports and all devices. This flag must be set if neither '--port' or '--device' are specified. f format expcap The file format to use when writing out packets. Valid options are 'pcap' and 'expcap'. c count 0 (no limit) The maximum number of files to write out in total. M maxfile 0 (128MB) The maximum file size for output files, in MB. Output files will never exceed 128MB, regardless of the value specified with this option. If the output must be spread over multiple files, Exact Extract will append _n to the filename, where n is the current segment being written out (starting from 1). u usepcap (flag) If set, Exact Extract will write pcap timestamps in the microsecond format. S snaplen 1518 The limit in bytes for each individual packet in the output file. r skip-runts (flag) If this flag is set, runt frames will not be written to the output D allow-duplicates (flag) By default, Exact Extract will write over files which have the same name as specified by '--write'. If this flag is set, it will instead create a file with a duplicate name, and append __n to the duplicate file, where n is the current number of files with the same name. t hpt-trailer (flag) If this flag is set, Exact Extract will assume that each packet terminates in a Fusion HPT timestamp trailer. It will extract the timestamp from this trailer and write it to the pcap header (in microsecon/nanosecond format) and to the expcap trailer (in picosecond format) for all output files. Note: this option assumes all packets in the input captures have Fusion HPT trailers. If this is not true, the pcap/expcap timestamp fields will contain invalid values in the output file(s). s steer (null) --steer accepts one of the following values as valid options: hpt, vlan, expcap. A directory must be specified when using this option (via '--write-dir') If this option is set, Exact Extract will steer packets to separate files depending upon their content. Specifying '--steer vlan' will cause packets to be steered to separate files depending upon their VLAN ID. For example, packets with VLAN ID 100 will be steered to the file {write-dir}/{write}_vlan_100.pcap. Packets which do not have an 8021.Q tag will be written to the file named {write-dir}/{write}.pcap. Specifying '--steer hpt' will cause packets to be steered to separate files depending upon their Fusion HPT trailer, using the device ID and port number. For example, files with device ID 0 and port number 10 will be steered to the file {write-dir}/{write}_device_0_port_10.pcap. Note: use of this option assumes that all packets in the input file(s) have a Fusion HPT trailer. Specifying '--steer expcap' will cause packets to be steered to separate files depending upon their expcap footer, using the device ID and port number. For example, files with device ID 0 and port number 10 will be steered to the file {write-dir}/{write}_device_0_port_10.pcap. Note: use of this option assumes that all packets in the input file(s) have an expcap footer. Note Depending upon the options specified by, Exact Extract may attempt to keep more files open simultaneously than is allowed the OS. If it is unable to override this limit, it will need to close and open outputs each time a packet is written in order to ensure that it does not exceed this limit. This can degrade the performance of Exact Extract, due to the additional overhead of repeatedly opening and closing output files. On Linux, it is possible to override the number of open file descriptors limit by giving Exact Extract the \"CAP_SYS_RESOURCE\" capability to the binary. This can be accomplished by running: $ sudo setcap cap_sys_resouce+ep exact-pcap-extract The full list of permissions granted by CAP_SYS_RESOURCE is available on the capabilities(7) man page. Granting Exact Extract this permission should improve its performance, however it is not a requirement. Users will receive the warning \"Could not raise the limit on concurrently open files\" if they are exceeding the open file limit.","title":"Exact Extract"},{"location":"tools/match/","text":"Exact PCAP Match Exact PCAP Match ( exact-pcap-match ) is a tool used to match packets in two separate files. It outputs timestamps, timestamp deltas (latency) and the packet data of matched packets in a .csv file. Where timestamp deltas are shown, they are produced from reference_file.timestamp minus input_file.timestamp . The following table lists all commands available: Short Long Default Description r reference (required) The reference file to use for matching. i input (required) The file to compare against the reference file. c csv (required) The .csv file to write matching packet statistics to. R ref-miss (optional) The .csv file to store reference packet misses. These are packets which were present in the reference file but were not found in the input file. I inp-miss (optional) The .csv file to store input packet misses. These are packets which were present in the input file but were not found in the reference file. f format (required) The input file format. Valid values are pcap or expcap . O offset-ref 0 Start matching packets in the reference file from this packet offset onwards. o offset-inp 0 Start matching packets in the input file from this packet offset onwards. M max-ref -1 (no limit) Limit the amount of packets in the reference file to match. n num-chars 64 The number of bytes from matched packets to output in the packet data field of the .csv file. v verbose (flag) Enables verbose output printing.","title":"Exact PCAP Match"},{"location":"tools/match/#exact-pcap-match","text":"Exact PCAP Match ( exact-pcap-match ) is a tool used to match packets in two separate files. It outputs timestamps, timestamp deltas (latency) and the packet data of matched packets in a .csv file. Where timestamp deltas are shown, they are produced from reference_file.timestamp minus input_file.timestamp . The following table lists all commands available: Short Long Default Description r reference (required) The reference file to use for matching. i input (required) The file to compare against the reference file. c csv (required) The .csv file to write matching packet statistics to. R ref-miss (optional) The .csv file to store reference packet misses. These are packets which were present in the reference file but were not found in the input file. I inp-miss (optional) The .csv file to store input packet misses. These are packets which were present in the input file but were not found in the reference file. f format (required) The input file format. Valid values are pcap or expcap . O offset-ref 0 Start matching packets in the reference file from this packet offset onwards. o offset-inp 0 Start matching packets in the input file from this packet offset onwards. M max-ref -1 (no limit) Limit the amount of packets in the reference file to match. n num-chars 64 The number of bytes from matched packets to output in the packet data field of the .csv file. v verbose (flag) Enables verbose output printing.","title":"Exact PCAP Match"},{"location":"tools/modify/","text":"Exact PCAP Modify Exact PCAP Modify ( exact-pcap-modify ) is a tool which can be used to filter and modify Ethernet packets. Where modifications occur which would invalidate a checksum, Exact PCAP Modify will recalculate a correct checksum in the output file. It can perform modify/filter operations on the following fields: Ethernet header: Destination MAC address (DST MAC) Souce MAC address (SRC MAC) 8021.Q tag: VLAN ID IPv4 header: Source address (SRC IP) Destination address (DST IP) Time-to-live (IP TTL) UDP/TCP headers: Source port (SRC PORT) Destination port (DST PORT) $ exact-pcap-modify -i capture.pcap -f expcap -w modified -a 1.1.1.1,2.2.2.2 Configuration Options which operate on the fields of a header are to be supplied in the form filter,modify . For example, if Exact PCAP Modify should filter a capture such that only packets with the SRC IP of 1.1.1.1 are present written to the output, it should be invoked with the --src-ip 1.1.1.1 option. If the user wishes to modify all packets which have the SRC IP 1.1.1.1 to produce an output where the SRC IP becomes 2.2.2.2, it should be invoked with the --src-ip 1.1.1.1,2.2.2.2 option. When multiple filters are used, packets will need to match all of the specified filters to be present in the output capture. The following table lists all commands available: Short Long Default Description i input (required) The .pcap / .expcap file to filter/modify. w write (required) The destination file where packets which match the specified filter will be written to. W write-filtered (optional) The destination file where all packets which do not match all specified filters will be written to. v verbose (flag) Enables verbose output printing. f format expcap The file format to use when writing out packets. Valid options are .pcap and .expcap . o offset 0 Jump to the specified packet offset and start processing filter/modify operations from there. t time 0 (Epoch time in ns) Skip all packets that are older than this time. m max 0 (no limit) The maximum number of packets to write out in total. n num-chars 64 For use with --verbose . Limit the amount of characters written when dumping packets. e --dst-mac (null) Filter/modify based on the DST MAC. Accepts arguments in the form 0x001122334455 for filtering and 0x001122334455,0xAABBCCDDEEFF for filtering and modifying. E --src-mac (null) Fitler/modify based on the SRC MAC. Accepts arguments in the form 0x001122334455 for filtering and 0x001122334455,0xAABBCCDDEEFF for filtering and modifying. l vlan (null) Filter/modify based on the VLAN ID. Accepts arguments in the form 100 for filtering and 100,200 for filtering and modifying. The --vlan option also allows users to strip and add 8021.Q tags in addition to filtering and modifying based on these tags. For example if --vlan 0,100 is specified, that will cause Exact PCAP Modify to add an 8021.Q header with a VLAN ID of 100 to all non-8021.Q frames. The inverse usage, --vlan 100,0 will cause Exact PCAP Modify to strip all 8021.Q frames which have VLAN ID 100 and set the Ethertype to IPv4. a src-ip (null) Fitler/modify based on the SRC IP. Accepts arguments in the form 1.1.1.1 for filtering and 1.1.1.1,2.2.2.2 for filtering and modifying. A dst-ip (null) Fitler/modify based on the DST IP. Accepts arguments in the form 1.1.1.1 for filtering and 1.1.1.1,2.2.2.2 for filtering and modifying. T ip-ttl (null) Fitler/modify based on the IP TTL. Accepts arguments in the form 10 for filtering and 10,64 for filtering and modifying. p src-port (null) Fitler/modify based on the SRC PORT of the TCP/UDP header. Accepts arguments in the form 1000 for filtering and 1000,2000 for filtering and modifying. P dst-port (null) Fitler/modify based on the DST PORT of the TCP/UDP header. Accepts arguments in the form 1000 for filtering and 1000,2000 for filtering and modifying. d device-type nexus3548 When modifying frames, emulate the behaviour of the specified device. Valid values are: nexus3548 , fusion , triton , arista7150 .","title":"Exact PCAP Modify"},{"location":"tools/modify/#exact-pcap-modify","text":"Exact PCAP Modify ( exact-pcap-modify ) is a tool which can be used to filter and modify Ethernet packets. Where modifications occur which would invalidate a checksum, Exact PCAP Modify will recalculate a correct checksum in the output file. It can perform modify/filter operations on the following fields: Ethernet header: Destination MAC address (DST MAC) Souce MAC address (SRC MAC) 8021.Q tag: VLAN ID IPv4 header: Source address (SRC IP) Destination address (DST IP) Time-to-live (IP TTL) UDP/TCP headers: Source port (SRC PORT) Destination port (DST PORT) $ exact-pcap-modify -i capture.pcap -f expcap -w modified -a 1.1.1.1,2.2.2.2","title":"Exact PCAP Modify"},{"location":"tools/modify/#configuration","text":"Options which operate on the fields of a header are to be supplied in the form filter,modify . For example, if Exact PCAP Modify should filter a capture such that only packets with the SRC IP of 1.1.1.1 are present written to the output, it should be invoked with the --src-ip 1.1.1.1 option. If the user wishes to modify all packets which have the SRC IP 1.1.1.1 to produce an output where the SRC IP becomes 2.2.2.2, it should be invoked with the --src-ip 1.1.1.1,2.2.2.2 option. When multiple filters are used, packets will need to match all of the specified filters to be present in the output capture. The following table lists all commands available: Short Long Default Description i input (required) The .pcap / .expcap file to filter/modify. w write (required) The destination file where packets which match the specified filter will be written to. W write-filtered (optional) The destination file where all packets which do not match all specified filters will be written to. v verbose (flag) Enables verbose output printing. f format expcap The file format to use when writing out packets. Valid options are .pcap and .expcap . o offset 0 Jump to the specified packet offset and start processing filter/modify operations from there. t time 0 (Epoch time in ns) Skip all packets that are older than this time. m max 0 (no limit) The maximum number of packets to write out in total. n num-chars 64 For use with --verbose . Limit the amount of characters written when dumping packets. e --dst-mac (null) Filter/modify based on the DST MAC. Accepts arguments in the form 0x001122334455 for filtering and 0x001122334455,0xAABBCCDDEEFF for filtering and modifying. E --src-mac (null) Fitler/modify based on the SRC MAC. Accepts arguments in the form 0x001122334455 for filtering and 0x001122334455,0xAABBCCDDEEFF for filtering and modifying. l vlan (null) Filter/modify based on the VLAN ID. Accepts arguments in the form 100 for filtering and 100,200 for filtering and modifying. The --vlan option also allows users to strip and add 8021.Q tags in addition to filtering and modifying based on these tags. For example if --vlan 0,100 is specified, that will cause Exact PCAP Modify to add an 8021.Q header with a VLAN ID of 100 to all non-8021.Q frames. The inverse usage, --vlan 100,0 will cause Exact PCAP Modify to strip all 8021.Q frames which have VLAN ID 100 and set the Ethertype to IPv4. a src-ip (null) Fitler/modify based on the SRC IP. Accepts arguments in the form 1.1.1.1 for filtering and 1.1.1.1,2.2.2.2 for filtering and modifying. A dst-ip (null) Fitler/modify based on the DST IP. Accepts arguments in the form 1.1.1.1 for filtering and 1.1.1.1,2.2.2.2 for filtering and modifying. T ip-ttl (null) Fitler/modify based on the IP TTL. Accepts arguments in the form 10 for filtering and 10,64 for filtering and modifying. p src-port (null) Fitler/modify based on the SRC PORT of the TCP/UDP header. Accepts arguments in the form 1000 for filtering and 1000,2000 for filtering and modifying. P dst-port (null) Fitler/modify based on the DST PORT of the TCP/UDP header. Accepts arguments in the form 1000 for filtering and 1000,2000 for filtering and modifying. d device-type nexus3548 When modifying frames, emulate the behaviour of the specified device. Valid values are: nexus3548 , fusion , triton , arista7150 .","title":"Configuration"},{"location":"tools/overview/","text":"Additional Tools Exact Capture ships with a number of additional tools. These additional tools are designed to facilitate working with/converting expcap formatted output files and to assist with performing benchmarking/performance measurement using exact-capture. This guide provides an overview of the tools and a detailed example use case to understand how they fit together. Following is a brief description of each tool: exact-pcap-extract - This tool has several functions (which may all be applied at once if required): 1) At runtime, exact-capture may be configured to output several expcap files (to maximize capture performance). The exact-pcap-extract tool can be used to merge all of these expcap files into one output file. 2) Some users may prefer to work with pcap formatted capture files instead of expcap format. exact-pcap-extract can be used to convert from expcap to standard pcap output format. 3) Nexus 3550-F HPT devices can append HPT (High Precision Timestamping) trailers to packets. Users may want to strip these trailers and recover the timetamps into expcap or pcap format. 4) Users may be interested in the analysing only specific capture ports (as stored in a VLAN header, HPT trailer, or expcap footer) exact-pcap-extract can be used to filter packets in the input file(s) so that only a specific capture port is present in the output file. 5) Users may be interested in generating a separate output file for every the capture port (as stored in a VLAN header, HPT trailer, or expcap footer) that is present in the input file(s). exact-pcap-extract can be configured to steer packets into separate output files based on the capture port ID. exact-pcap-analyze - This tool prints statistics about the packet rates/throughput for a given pcap or expcap capture file. It is useful for \"sanity checking\" basic properties of a capture file before performing further analysis. exact-pcap-match - A common use case of is for Exact Capture is latency calculations. This tool can be used to match identical frames from two pcap or expcap files and calculate the latency between them. If you are measuring latency across a network device which modifies the packet on the way through, the exact-pcap-modify application can be used to transform packets so that they match exactly. exact-pcap-modify - This tool can be used to filter and modify header values (Ethernet/IPv4/L4) in pcap / expcap files. It will preserve the original timestamps and capture ports in the packets it modifies which means that it can be used to allow exact-pcap-match to match packets that have been modified by network device. exact-pcap-parse - This tool is useful for creating ASCII/CSV text dumps of pcap and expcap files and for working with picosecond timestamps. These ASCII text dumps are easily parsable by external tooling. This makes it easy to use (text based) Unix toolchains to quickly perform analysis on packet traces. Source code for all of the tools can be found in the the /tools directory of the Exact-Capture source repository. All of the tools are installed by default and should be available with a working installation of exact-capture . Example Use Case To better understand how all of the tools fit together, consider the following example use case. In this example, we want to measure the layer 3 forwarding latency performance of a Nexus 3550-T (formerly ExaLINK Triton) switch. In layer 3 forwarding mode, the the device receives packets, with IP address 1.1.1.1 , and forwards them to IP address 2.2.2.2 , adjusting the packet headers as it does so. The measurement configuration is shown in the diagram below: The above diagram shows a traffic generator, connected to a Nexus 3350-F (formerly ExaLINK Fusion) HPT tap/agg switch. The Nexus 3550-F HPT has a layer 1 crosspoint switch internally which is used to both send packets to the timesatmping mirror (internally), and, to replicate the same packets out the Nexus 3550-T switch (which is the Device Under Test or DUT). Timestamped packets are sent to the exact-capture host on port exanic0:0 . Packets leaving the Nexus 3550-T are sent to the Nexus 3550-F HPT, also timestamped, and also sent to the capture host on port exanic0:0 . Toolchain Overview The following figure shows an overview of the exact-capture toolchain used in this example. Details of each step are described below. 1. Capture The first stage required is to generate traffic and capture it with exact-capture . See the configuration guide for more information on the parameters for exact-capture . $ exact-capture -i exanic0:0 -i -exanic1:0 -o ./0 -c 0:1:2,3 -k -S Exact-Capture 1.0 (00200000-00000080) Copyright Exablaze Pty Ltd 2018 ... Exact Capture finished SW Received: 400011 packets ( 0.007 MP/s ) 30 MB ( 0.005 Gb/s ) SW Wrote: 400011 packets ( 0.007 MP/s ) 30 MB ( 0.005 Gb/s ) Lost RX/WR: 0 packets ( 0.000 MP/s ) 0 MB ( 0.000 Gb/s ) Dropped: 0 packets ( 0.000 MP/s ) SW Overflows: 0 times ( 0.000 /s ) The Nexus 3550-F HPT appends picosecond granularity timestamps to packets arriving on two physical interfaces (which are connected to the input and the output ports on the Nexus 3550-T). These timestamped packets are multiplexed together and sent to the capture host on exanic0:0 . exact-capture will take the packets input from exanic0:0 and save it to 0.expcap on the disk. Once the initial capture data saved on disk, we can begin to process the capture with the rest of the toolchain. 2. Extract Before any other analysis is performed, the captures produced by exact-capture needs to be merged and extracted . In the case of this example, only one capture file is created ( 0.expcap ), so no merging is necessary. However, since there were two capture ports, we would like to extract packets from the trace, and steer them to different files depending on the HPT trailer port number. This is achieved as follows: $ exact-pcap-extract -i cap0-0.expcap -i -w 0 -W ./extracted -a -f expcap -s hpt -t This usage will cause exact-pcap-extract to steer packets to separate files, depending on which port of the Nexus 3550-F HPT they arrived on. It allows us to cleanly separate the input and output traffic that was sent to/received from the DUT. After this stage, there should now be two separate files, ./extracted/0_0.pcap and ./extracted/0_1.pcap . 3. Modify Now that we have split the raw capture into two separate files, we would like to match packets in both traces, and derive the latency performance of the 3550-T DUT. However, because we're benchmarking the 3550-T in layer 3 switch mode, we know that the switch will perform transformations on the input traffic. All packets with the destination IP address 1.1.1.1 will be changed to 2.2.2.2 with other fields updated accordingly. The exact-pcap-match tool will attempt to exactly match packets in both traces, so if there are any differences between the two captures passed to exact-pcap-match it will not be able to match these correctly. To resolve this issue, we use exact-pcap-modify . The exact-pcap-modify tool can be used to intelligently modify packets in pcap and expcap capture files. In this example use it to modify the ingress traffic (with destination IP 1.1.1.1 ) such that it identically matches the egress traffic (with destination IP 2.2.2.2 ). You may think of this operation as performing a kind of 'zero latency', 'perfect' virtual switching operation in software. The following example shows the command line to perform this transformation: $ exact-pcap-modify -i ./extracted/0_0.expcap -w ./0_0_1.expcap -a 1.1.1.1,2.2.2.2 -f expcap This will produce the file ./0_0_1.expcap , where any packets in ./extracted/0_0.pcap which had SRC IP 1.1.1.1, will now have SRC IP 2.2.2.2. 4. Match Once two captures have been produced which contain matching packets, exact-pcap-match can be used to calcualte the latency delta between matching packets. It will also indicate which packets failed to match, which can be used as a test for correctness. $ exact-pcap-match -r ./extracted/0_0_1.pcap -i ./0_1.pcap -c matches.csv -f expcap matches.csv will contain the timestamps, timestamp deltas (latency) and packet data from all packets in 0_1.pcap which are also found in 0_0_1.pcap . 5. Parse (optional) It is often convenient to convert packet captures to plain text. This means that they can be processed by external tooling which does not need to understand the binary formats. The exact-pcap-parse utility can enable this functionality by extracting pcap and expcap traces to .csv files. It can be invoked via: $ exact-pcap-parse -i ./0_0_1.pcap -c ./parsed.csv -f expcap In the resulting .csv file, each packet is stored on a separate line. For example, this means that we can easily determine the total number of packets in the capture just by running: $ wc -l ./parsed.csv 100004 6. Analyze (optional) Statistics other than traffic latency can be of interest when measuring the performance of a networked device. For this purpose, the exact-pcap-analyze tool can be used to print statistics such as the packet sizes, throughput, inter-frame gaps and packets per second of a given capture. It can be invoked via: $ exact-pcap-analyze -i ./0_0_1.pcap -f expcap -r 10 PCAP analyser, processing trace... ... [1613519681.589953512]: offset=99207 window=100.001ms ipt=[7491.397ns < 64252ns < 3085434.147ns] size=[64B < 64.000B < 64B] rate=[0.000pps < 0.097pps < 0.133pps] 0.016Mpps 0.01Gbps ######################################################### Found 100003 packets in trace \"./post_mod_0.pcap\" PCAP trace is 8116276549.47ns long (8116276.5495us, 8.1163s) Average packet rate is 12321.2904pps (0.0123Mpps) Packet sizes are in the range [64B,74B] Interfame gaps are in the range [7472.18ns,2074282148.39ns] note min IFG=0.00ns Packet rates are in the range [0.00pps,17548.77pps] [0.00Mpps,0.02Mpps]","title":"Overview"},{"location":"tools/overview/#additional-tools","text":"Exact Capture ships with a number of additional tools. These additional tools are designed to facilitate working with/converting expcap formatted output files and to assist with performing benchmarking/performance measurement using exact-capture. This guide provides an overview of the tools and a detailed example use case to understand how they fit together. Following is a brief description of each tool: exact-pcap-extract - This tool has several functions (which may all be applied at once if required): 1) At runtime, exact-capture may be configured to output several expcap files (to maximize capture performance). The exact-pcap-extract tool can be used to merge all of these expcap files into one output file. 2) Some users may prefer to work with pcap formatted capture files instead of expcap format. exact-pcap-extract can be used to convert from expcap to standard pcap output format. 3) Nexus 3550-F HPT devices can append HPT (High Precision Timestamping) trailers to packets. Users may want to strip these trailers and recover the timetamps into expcap or pcap format. 4) Users may be interested in the analysing only specific capture ports (as stored in a VLAN header, HPT trailer, or expcap footer) exact-pcap-extract can be used to filter packets in the input file(s) so that only a specific capture port is present in the output file. 5) Users may be interested in generating a separate output file for every the capture port (as stored in a VLAN header, HPT trailer, or expcap footer) that is present in the input file(s). exact-pcap-extract can be configured to steer packets into separate output files based on the capture port ID. exact-pcap-analyze - This tool prints statistics about the packet rates/throughput for a given pcap or expcap capture file. It is useful for \"sanity checking\" basic properties of a capture file before performing further analysis. exact-pcap-match - A common use case of is for Exact Capture is latency calculations. This tool can be used to match identical frames from two pcap or expcap files and calculate the latency between them. If you are measuring latency across a network device which modifies the packet on the way through, the exact-pcap-modify application can be used to transform packets so that they match exactly. exact-pcap-modify - This tool can be used to filter and modify header values (Ethernet/IPv4/L4) in pcap / expcap files. It will preserve the original timestamps and capture ports in the packets it modifies which means that it can be used to allow exact-pcap-match to match packets that have been modified by network device. exact-pcap-parse - This tool is useful for creating ASCII/CSV text dumps of pcap and expcap files and for working with picosecond timestamps. These ASCII text dumps are easily parsable by external tooling. This makes it easy to use (text based) Unix toolchains to quickly perform analysis on packet traces. Source code for all of the tools can be found in the the /tools directory of the Exact-Capture source repository. All of the tools are installed by default and should be available with a working installation of exact-capture .","title":"Additional Tools"},{"location":"tools/overview/#example-use-case","text":"To better understand how all of the tools fit together, consider the following example use case. In this example, we want to measure the layer 3 forwarding latency performance of a Nexus 3550-T (formerly ExaLINK Triton) switch. In layer 3 forwarding mode, the the device receives packets, with IP address 1.1.1.1 , and forwards them to IP address 2.2.2.2 , adjusting the packet headers as it does so. The measurement configuration is shown in the diagram below: The above diagram shows a traffic generator, connected to a Nexus 3350-F (formerly ExaLINK Fusion) HPT tap/agg switch. The Nexus 3550-F HPT has a layer 1 crosspoint switch internally which is used to both send packets to the timesatmping mirror (internally), and, to replicate the same packets out the Nexus 3550-T switch (which is the Device Under Test or DUT). Timestamped packets are sent to the exact-capture host on port exanic0:0 . Packets leaving the Nexus 3550-T are sent to the Nexus 3550-F HPT, also timestamped, and also sent to the capture host on port exanic0:0 .","title":"Example Use Case"},{"location":"tools/overview/#toolchain-overview","text":"The following figure shows an overview of the exact-capture toolchain used in this example. Details of each step are described below.","title":"Toolchain Overview"},{"location":"tools/overview/#1-capture","text":"The first stage required is to generate traffic and capture it with exact-capture . See the configuration guide for more information on the parameters for exact-capture . $ exact-capture -i exanic0:0 -i -exanic1:0 -o ./0 -c 0:1:2,3 -k -S Exact-Capture 1.0 (00200000-00000080) Copyright Exablaze Pty Ltd 2018 ... Exact Capture finished SW Received: 400011 packets ( 0.007 MP/s ) 30 MB ( 0.005 Gb/s ) SW Wrote: 400011 packets ( 0.007 MP/s ) 30 MB ( 0.005 Gb/s ) Lost RX/WR: 0 packets ( 0.000 MP/s ) 0 MB ( 0.000 Gb/s ) Dropped: 0 packets ( 0.000 MP/s ) SW Overflows: 0 times ( 0.000 /s ) The Nexus 3550-F HPT appends picosecond granularity timestamps to packets arriving on two physical interfaces (which are connected to the input and the output ports on the Nexus 3550-T). These timestamped packets are multiplexed together and sent to the capture host on exanic0:0 . exact-capture will take the packets input from exanic0:0 and save it to 0.expcap on the disk. Once the initial capture data saved on disk, we can begin to process the capture with the rest of the toolchain.","title":"1. Capture"},{"location":"tools/overview/#2-extract","text":"Before any other analysis is performed, the captures produced by exact-capture needs to be merged and extracted . In the case of this example, only one capture file is created ( 0.expcap ), so no merging is necessary. However, since there were two capture ports, we would like to extract packets from the trace, and steer them to different files depending on the HPT trailer port number. This is achieved as follows: $ exact-pcap-extract -i cap0-0.expcap -i -w 0 -W ./extracted -a -f expcap -s hpt -t This usage will cause exact-pcap-extract to steer packets to separate files, depending on which port of the Nexus 3550-F HPT they arrived on. It allows us to cleanly separate the input and output traffic that was sent to/received from the DUT. After this stage, there should now be two separate files, ./extracted/0_0.pcap and ./extracted/0_1.pcap .","title":"2. Extract"},{"location":"tools/overview/#3-modify","text":"Now that we have split the raw capture into two separate files, we would like to match packets in both traces, and derive the latency performance of the 3550-T DUT. However, because we're benchmarking the 3550-T in layer 3 switch mode, we know that the switch will perform transformations on the input traffic. All packets with the destination IP address 1.1.1.1 will be changed to 2.2.2.2 with other fields updated accordingly. The exact-pcap-match tool will attempt to exactly match packets in both traces, so if there are any differences between the two captures passed to exact-pcap-match it will not be able to match these correctly. To resolve this issue, we use exact-pcap-modify . The exact-pcap-modify tool can be used to intelligently modify packets in pcap and expcap capture files. In this example use it to modify the ingress traffic (with destination IP 1.1.1.1 ) such that it identically matches the egress traffic (with destination IP 2.2.2.2 ). You may think of this operation as performing a kind of 'zero latency', 'perfect' virtual switching operation in software. The following example shows the command line to perform this transformation: $ exact-pcap-modify -i ./extracted/0_0.expcap -w ./0_0_1.expcap -a 1.1.1.1,2.2.2.2 -f expcap This will produce the file ./0_0_1.expcap , where any packets in ./extracted/0_0.pcap which had SRC IP 1.1.1.1, will now have SRC IP 2.2.2.2.","title":"3. Modify"},{"location":"tools/overview/#4-match","text":"Once two captures have been produced which contain matching packets, exact-pcap-match can be used to calcualte the latency delta between matching packets. It will also indicate which packets failed to match, which can be used as a test for correctness. $ exact-pcap-match -r ./extracted/0_0_1.pcap -i ./0_1.pcap -c matches.csv -f expcap matches.csv will contain the timestamps, timestamp deltas (latency) and packet data from all packets in 0_1.pcap which are also found in 0_0_1.pcap .","title":"4. Match"},{"location":"tools/overview/#5-parse-optional","text":"It is often convenient to convert packet captures to plain text. This means that they can be processed by external tooling which does not need to understand the binary formats. The exact-pcap-parse utility can enable this functionality by extracting pcap and expcap traces to .csv files. It can be invoked via: $ exact-pcap-parse -i ./0_0_1.pcap -c ./parsed.csv -f expcap In the resulting .csv file, each packet is stored on a separate line. For example, this means that we can easily determine the total number of packets in the capture just by running: $ wc -l ./parsed.csv 100004","title":"5. Parse  (optional)"},{"location":"tools/overview/#6-analyze-optional","text":"Statistics other than traffic latency can be of interest when measuring the performance of a networked device. For this purpose, the exact-pcap-analyze tool can be used to print statistics such as the packet sizes, throughput, inter-frame gaps and packets per second of a given capture. It can be invoked via: $ exact-pcap-analyze -i ./0_0_1.pcap -f expcap -r 10 PCAP analyser, processing trace... ... [1613519681.589953512]: offset=99207 window=100.001ms ipt=[7491.397ns < 64252ns < 3085434.147ns] size=[64B < 64.000B < 64B] rate=[0.000pps < 0.097pps < 0.133pps] 0.016Mpps 0.01Gbps ######################################################### Found 100003 packets in trace \"./post_mod_0.pcap\" PCAP trace is 8116276549.47ns long (8116276.5495us, 8.1163s) Average packet rate is 12321.2904pps (0.0123Mpps) Packet sizes are in the range [64B,74B] Interfame gaps are in the range [7472.18ns,2074282148.39ns] note min IFG=0.00ns Packet rates are in the range [0.00pps,17548.77pps] [0.00Mpps,0.02Mpps]","title":"6. Analyze (optional)"},{"location":"tools/parse/","text":"Exact PCAP Parse Exact PCAP Parse ( exact-pcap-parse ) is a tool used to create ASCII dumps from .pcap and .expcap files. It outputs timestamps and packet data in .csv files. The following table lists all commands available: Short Long Default Description i input (required) The input `.pcap` file to parse and dump. c csv (required) The `.csv` file to write out the dumped timestamps and packet data. v verbose (flag) Enables verbose output printing. f format (required) The input file format. Valid values are pcap or expcap . o offset 0 Start parsing packets from this packet offset into the input file. m max -1 (no limit) Limit the number of packets to parse. n num-chars 64 The number of bytes parse and output in the packet data field of the .csv file.","title":"Exact PCAP Parse"},{"location":"tools/parse/#exact-pcap-parse","text":"Exact PCAP Parse ( exact-pcap-parse ) is a tool used to create ASCII dumps from .pcap and .expcap files. It outputs timestamps and packet data in .csv files. The following table lists all commands available: Short Long Default Description i input (required) The input `.pcap` file to parse and dump. c csv (required) The `.csv` file to write out the dumped timestamps and packet data. v verbose (flag) Enables verbose output printing. f format (required) The input file format. Valid values are pcap or expcap . o offset 0 Start parsing packets from this packet offset into the input file. m max -1 (no limit) Limit the number of packets to parse. n num-chars 64 The number of bytes parse and output in the packet data field of the .csv file.","title":"Exact PCAP Parse"}]}